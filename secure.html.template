<!doctype html>
<html class="encrypted-html">
<head>
    <meta charset="utf-8">
    <title>Protected Page</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.min.js" integrity="sha384-lp4k1VRKPU9eBnPePjnJ9M2RF3i7PC30gXs70+elCVfgwLwx1tv5+ctxdtwxqZa7" crossorigin="anonymous"></script>

    <meta http-equiv="cache-control" content="max-age=0"/>
    <meta http-equiv="cache-control" content="no-cache"/>
    <meta http-equiv="expires" content="0"/>
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT"/>
    <meta http-equiv="pragma" content="no-cache"/>

    <style>
        .encrypted-hr {
            margin-top: 20px;
            margin-bottom: 20px;
            border: 0;
            border-top: 1px solid #eee;
        }

        .encrypted-page {
            width: 360px;
            padding: 8% 0 0;
            margin: auto;
            box-sizing: border-box;
        }

        .encrypted-form {
            position: relative;
            z-index: 1;
            background: #FFFFFF;
            max-width: 360px;
            margin: 0 auto 100px;
            padding: 45px;
            text-align: center;
            box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
        }

        .encrypted-form input {
            outline: 0;
            background: #f2f2f2;
            width: 100%;
            border: 0;
            margin: 0 0 15px;
            padding: 15px;
            box-sizing: border-box;
            font-size: 14px;
        }

        .encrypted-form .encrypted-decrypt-button {
            text-transform: uppercase;
            outline: 0;
            background: #4c516d;
            // background: #0e4d92;
            width: 100%;
            border: 0;
            padding: 15px;
            color: #FFFFFF;
            font-size: 14px;
            cursor: pointer;
        }

        .encrypted-form .encrypted-decrypt-button:hover, .encrypted-form .encrypted-decrypt-button:active, .encrypted-form .encrypted-decrypt-button:focus {
            background: #43A047;
        }

        .encrypted-html {
            height: 100%;
        }

        .encrypted-body {
            margin-bottom: 1em;
            background: #4c516d;
            // background: #0e4d92;
            font-family: "Arial", sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .encrypted-instructions {
            margin-top: -1em;
            margin-bottom: 1em;
        }

        .encrypted-title {
            font-size: 1.5em;
        }

        .encrypted-footer {
            position: fixed;
            height: 20px;
            font-size: 16px;
            padding: 2px;
            bottom: 0;
            left: 0;
            right: 0;
            margin-bottom: 0;
        }

        .encrypted-footer p {
            margin: 2px;
            text-align: center;
            float: right;
        }

        .encrypted-footer a {
            text-decoration: none;
        }
    </style>
</head>

<body class="encrypted-body">
<div class="encrypted-page">
    <div class="encrypted-form">
        <hr class="encrypted-hr">

        <form id="encrypted-form" action="#" method="post">
            <input id="encrypted-password" type="password" name="password" placeholder="passphrase" autofocus/>
            <input type="SUBMIT" class="encrypted-decrypt-button" value="DECRYPT"/>
        </form>
    </div>
</div>

<script>
    function decrypt(encryptedMsg, pass) {
        const salt = CryptoJS.enc.Hex.parse(encryptedMsg.substr(0, 32));
        const iv = CryptoJS.enc.Hex.parse(encryptedMsg.substr(32, 32))
        const encrypted = encryptedMsg.substring(64);

		const keySize = 256;
		const iterations = 4096;
        const key = CryptoJS.PBKDF2(pass, salt, {
            keySize: keySize / 32,
            iterations: iterations
        });

        const decrypted = CryptoJS.AES.decrypt(encrypted, key, {
            iv: iv,
            padding: CryptoJS.pad.Pkcs7,
            mode: CryptoJS.mode.CBC
        });

		const utf8 = decrypted.toString(CryptoJS.enc.Utf8);

        return utf8;
    }

	function verifyAndDecrypt(encrypted, passphrase) {
		const encryptedHMAC = encrypted.substring(0, 64);
		const encryptedHTML = encrypted.substring(64);
		const passphraseHash = CryptoJS.SHA256(passphrase).toString();
		const decryptedHMAC = CryptoJS.HmacSHA256(encryptedHTML, passphraseHash).toString();

		if (decryptedHMAC !== encryptedHMAC) {
			console.log("failed");
			return null;
        }

		return decrypt(encryptedHTML, passphrase);
	}

	function saveSession(session) {
		window.localStorage.setItem('session', JSON.stringify(session));

		console.log("saved session", session);

		return true;
	}

	function loadSession() {
		const raw = window.localStorage.getItem('session');
		if (!raw) {
			return null;
		}

		return JSON.parse(raw);
	}

	const encrypted = '{{ .Ciphertext }}';

	document.addEventListener("DOMContentLoaded", function(){
		const session = loadSession();
		if (session) {
			const html = verifyAndDecrypt(encrypted, session.passphrase);
			if (html) {
				document.write(html);
				document.close();
			}
		}
	});

	document.getElementById('encrypted-form').addEventListener('submit', function(e) {
        e.preventDefault();

        const passphrase = document.getElementById('encrypted-password').value;
		const html = verifyAndDecrypt(encrypted, passphrase);
		if (html) {
			saveSession({
				passphrase: passphrase
			});

			document.write(html);
			document.close();
		}
    });
</script>
</body>
</html>
